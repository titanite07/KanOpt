version: '3.8'

services:
  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: kanopt-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: kanopt
      RABBITMQ_DEFAULT_PASS: kanopt123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Database
  postgres:
    image: postgres:15
    container_name: kanopt-postgres
    environment:
      POSTGRES_DB: kanopt
      POSTGRES_USER: kanopt
      POSTGRES_PASSWORD: kanopt123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kanopt"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: kanopt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kanopt-backend-api
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: kanopt
      DB_USER: kanopt
      DB_PASSWORD: kanopt123
      RABBITMQ_URL: amqp://kanopt:kanopt123@rabbitmq:5672/
      REDIS_URL: redis:6379
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # Allocator Agent
  allocator-agent:
    build:
      context: ./backend
      dockerfile: Dockerfile.agent
    container_name: kanopt-allocator-agent
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: kanopt
      DB_USER: kanopt
      DB_PASSWORD: kanopt123
      RABBITMQ_URL: amqp://kanopt:kanopt123@rabbitmq:5672/
      REDIS_URL: redis:6379
      API_URL: http://backend-api:8080
      PORT: 8081
    ports:
      - "8081:8081"
    depends_on:
      - backend-api
      - rabbitmq
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # AI/ML Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: kanopt-ai-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: kanopt
      DB_USER: kanopt
      DB_PASSWORD: kanopt123
      RABBITMQ_URL: amqp://kanopt:kanopt123@rabbitmq:5672/
      REDIS_URL: redis:6379
      MODEL_PATH: /app/models
      PORT: 8000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./ai-service:/app
      - ai_models:/app/models
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kanopt-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_AGENT_URL: http://localhost:8081
      NEXT_PUBLIC_AI_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      - backend-api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  rabbitmq_data:
  postgres_data:
  redis_data:
  ai_models:

networks:
  default:
    name: kanopt-network
